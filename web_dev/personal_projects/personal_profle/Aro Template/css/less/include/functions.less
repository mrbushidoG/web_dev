//Less functions (mixins)


//Border radius mixin
.border-radius(@radius)
{
  -webkit-border-radius: @radius;
  -moz-border-radius:    @radius;
  border-radius:         @radius;
  -moz-background-clip:    padding;
  -webkit-background-clip: padding-box;
  background-clip:         padding-box;
}


//Filter mixin
.filter(@filter) {
  -webkit-filter: @filter;
  -moz-filter: @filter;
  -o-filter: @filter;
  filter: @filter;
}


//Font face mixin if you want to load fonts from local serwer instead of google.
.font-face(@fontName, @fileName, @svgHashName, @fontWeight, @fontStyle)
{
  @font-face {
    font-family: @fontName;
    src: url('../fonts/@{fileName}.eot');
    src: url('../fonts/@{fileName}.eot?#iefix') format('embedded-opentype'),
    url('../fonts/@{fileName}.woff') format('woff'),
    url('../fonts/@{fileName}.ttf') format('truetype'),
    url('../fonts/@{fileName}.svg#@{svgHashName}') format('svg');
    font-weight: @fontWeight;
    font-style: @fontStyle;
  }
}


//Font face mixin if you want to load fonts from local serwer instead of google.
//This function loads one more file with extension .woff2
.font-face-full(@fontName, @fileName, @svgHashName, @fontWeight, @fontStyle)
{
  @font-face {
    font-family: @fontName;
    src: url('../fonts/@{fileName}.eot');
    src: url('../fonts/@{fileName}.eot?#iefix') format('embedded-opentype'),
    url('../fonts/@{fileName}.woff2') format('woff2'),
    url('../fonts/@{fileName}.woff') format('woff'),
    url('../fonts/@{fileName}.ttf') format('truetype'),
    url('../fonts/@{fileName}.svg#@{svgHashName}') format('svg');
    font-weight: @fontWeight;
    font-style: @fontStyle;
  }
}


//Opacity mixin
.opacity(@opacity)
{
  @ie: @opacity * 100;
  -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=@{ie})"; // IE8
  filter: alpha(opacity=@ie); // IE 5-7
  opacity: @opacity;
}


//Transition mixin
.transition(@transition) {
  -webkit-transition: @transition;
  -moz-transition: @transition;
  -o-transition: @transition;
  transition: @transition;
}

// retina.less
// A helper mixin for applying high-resolution background images (http://www.retinajs.com)

// Updated by John Newman
// github.com/jgnewman
// http://axial.agency

// /**
// * Allows you to use retina images at various pixel densities.
// * Examples:
// *
// *   .retina(/images/mypic.jpg, 2);
// *   .retina(/images/mypic.jpg, 3, 100px 100px, left top no-repeat transparent);
// *
// * @param  {String} $path               The path to the file name minus extension.
// * @param  {Number} $cap:    2          The highest pixel density level images exist for.
// * @param  {Value}  $size:   auto auto  The intended width of the rendered image.
// * @param  {Value}  $extras: null       Any other `background` values to be added.
// */
.retina(@path, @cap: 2, @size: auto auto, @extras: ~'') {
  @lowretina: ~"(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx)";
  @2xpath: ~`@{path}.replace(/\.\w+$/, function(match) { return "@2x" + match; })`;

//  /*
//   * Set a base background for 1x environments.
//   */
  background: url(@path) @extras;
  background-size: @size;

//  /*
//   * Create an @2x-ish media query.
//   */
  @media @lowretina {
    background      : url(@2xpath) @extras;
    background-size : @size;
  }

//  /*
//   * Create media queries for all environments that the user has
//   * provided images for.
//   */
  .create-queries() when (@cap >= 2) {
    .loop(@env) when (@env <= @cap) {
      @retinapath: ~`@{path}.replace(/\.\w+$/, function(match) { return "@@{env}x" + match; })`;
      @media (-webkit-min-device-pixel-ratio: @env),
      (min-resolution: @env * 96dpi) {
        background      : url(@retinapath) @extras;
        background-size : @size;
      }
      .loop((@env + 1));    // next iteration
    }
    .loop(2);
  }
  .create-queries();
}
